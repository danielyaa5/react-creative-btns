'use strict';

exports.__esModule = true;

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _mapSpecimenOption = require('./mapSpecimenOption');

var _mapSpecimenOption2 = _interopRequireDefault(_mapSpecimenOption);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var removeEmpty = _ramda2.default.filter(_ramda2.default.complement(_ramda2.default.isEmpty));
var splitType = _ramda2.default.compose(removeEmpty, _ramda2.default.split('|'));
var splitOptions = _ramda2.default.compose(removeEmpty, _ramda2.default.split(','));

var camelize = function camelize(str) {
  return str.replace(/-(\w)/g, function (_, c) {
    return c.toUpperCase();
  });
};

var nothing = function nothing() {
  return null;
};
var mapSpanToProp = (0, _mapSpecimenOption2.default)(/^span-(\d)$/, function (v) {
  return { span: +v };
});
var camelizeOption = function camelizeOption(option) {
  var _ref;

  return _ref = {}, _ref[camelize(option)] = true, _ref;
};

var optionToKeyValue = function optionToKeyValue(mapOptionsToProps) {
  return function (option) {
    var _arr = [mapOptionsToProps, mapSpanToProp];

    for (var _i = 0; _i < _arr.length; _i++) {
      var mapper = _arr[_i];
      if (typeof mapper === 'function') {
        var prop = mapper(option);
        if (prop !== null) {
          return prop;
        }
      }
    }
    return camelizeOption(option);
  };
};

var parseSpecimenOptions = function parseSpecimenOptions() {
  var mapOptionsToProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : nothing;
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _splitType = splitType(options),
        _splitType$ = _splitType[1],
        restOptions = _splitType$ === undefined ? '' : _splitType$;

    return _ramda2.default.mergeAll(splitOptions(restOptions).map(optionToKeyValue(mapOptionsToProps)));
  };
};

exports.default = parseSpecimenOptions;