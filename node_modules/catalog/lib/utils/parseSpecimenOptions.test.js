'use strict';

var _parseSpecimenOptions = require('./parseSpecimenOptions');

var _parseSpecimenOptions2 = _interopRequireDefault(_parseSpecimenOptions);

var _mapSpecimenOption = require('./mapSpecimenOption');

var _mapSpecimenOption2 = _interopRequireDefault(_mapSpecimenOption);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

test('Default specimen options', function () {
  expect((0, _parseSpecimenOptions2.default)()()).toEqual({});
});

test('Boolean specimen options', function () {
  expect((0, _parseSpecimenOptions2.default)()('html|foo')).toEqual({ foo: true });
  expect((0, _parseSpecimenOptions2.default)()('html|foo,bar')).toEqual({ foo: true, bar: true });
});

test('Specimen options are camelized', function () {
  expect((0, _parseSpecimenOptions2.default)()('html|foo-bar')).toEqual({ fooBar: true });
});

test('Specimen span option is mapped by default', function () {
  expect((0, _parseSpecimenOptions2.default)()('html|span-1')).toEqual({ span: 1 });
});

test('Mapped specimen option', function () {
  expect((0, _parseSpecimenOptions2.default)((0, _mapSpecimenOption2.default)(/^foo-(\d)$/, function (v) {
    return { foo: +v };
  }))('html|foo-1')).toEqual({ foo: 1 });
});

test('Custom specimen option mapper', function () {
  expect((0, _parseSpecimenOptions2.default)(function (option) {
    var _ref;

    return _ref = {}, _ref[option.split('-')[0]] = +option.split('-')[1], _ref;
  })('html|foo-1,bar-3')).toEqual({ foo: 1, bar: 3 });
});

test('Mixed specimen options', function () {
  expect((0, _parseSpecimenOptions2.default)((0, _mapSpecimenOption2.default)(/^lang-(\w+)$/, function (lang) {
    return { lang: lang };
  }))('code|lang-javascript,collapsed,')).toEqual({ lang: 'javascript', collapsed: true });
});