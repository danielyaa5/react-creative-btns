'use strict';

exports.__esModule = true;
var removeMultiSlashes = function removeMultiSlashes(path) {
  return path.replace(/\/+/g, '/');
};
var stripTrailingSlashes = function stripTrailingSlashes(path) {
  return path.replace(/\/+$/, '');
};
var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
};
var stripBasePath = function stripBasePath(path, basePath) {
  return basePath !== '/' && path.indexOf(basePath) === 0 ? path.substr(basePath.length) : path;
};

var parsePath = exports.parsePath = function parsePath(path, options) {
  var pathname = path;
  var hash = '';
  var anchor = null;

  var hashIndex = pathname.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    anchor = pathname.substr(hashIndex + 1);
    pathname = pathname.substr(0, hashIndex);
  }

  if (pathname === '' && options.page) {
    // fall back to current page path (already contains basePath)
    pathname = stripBasePath(options.page.path, options.basePath);
  }

  // join basePath
  pathname = addLeadingSlash(stripTrailingSlashes(removeMultiSlashes(options.basePath + '/' + stripBasePath(pathname, options.basePath))));

  return options.useBrowserHistory ? { pathname: pathname, hash: hash === '#' ? '' : hash } : { pathname: pathname, query: anchor ? { a: anchor } : {} };
};

var isInternalPath = exports.isInternalPath = function isInternalPath(path, options) {
  var _parsePath = parsePath(path, options),
      pathname = _parsePath.pathname;

  return options.pagePaths.has(pathname);
};