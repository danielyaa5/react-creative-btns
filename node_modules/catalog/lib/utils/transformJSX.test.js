'use strict';

var _transformJSX = require('./transformJSX');

var _transformJSX2 = _interopRequireDefault(_transformJSX);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

test('Transforms a simple element', function () {
  expect((0, _transformJSX2.default)('<div>foo</div>', {}).code).toBe('"use strict";\n;return React.createElement(\n  "div",\n  null,\n  "foo"\n);');
});

test('Transforms a nested element', function () {
  expect((0, _transformJSX2.default)('<div><p>foo</p></div>', {}).code).toBe('"use strict";\n;return React.createElement(\n  "div",\n  null,\n  React.createElement(\n    "p",\n    null,\n    "foo"\n  )\n);');
});

test('Transforms a component', function () {
  expect((0, _transformJSX2.default)('<Foo bar>baz</Foo>', { Foo: function Foo() {
      return null;
    } }).code).toBe('"use strict";\n;return React.createElement(\n  Foo,\n  { bar: true },\n  "baz"\n);');
});

test('Transforms a component which is defined inline', function () {
  expect((0, _transformJSX2.default)('const Foo = () => null;\n<Foo bar>baz</Foo>', {}).code).toBe('"use strict";\n\nvar Foo = function Foo() {\n  return null;\n};;return React.createElement(\n  Foo,\n  { bar: true },\n  "baz"\n);');
});

test('Returns error on syntax error', function () {
  expect((0, _transformJSX2.default)('<div>', {}).error).toBeDefined();
});

test('Returns error when import is missing', function () {
  expect((0, _transformJSX2.default)('<Foo />', {}).error).toBeDefined();
});