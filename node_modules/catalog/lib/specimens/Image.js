'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _CatalogPropTypes = require('../CatalogPropTypes');

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _Specimen = require('../components/Specimen/Specimen');

var _Specimen2 = _interopRequireDefault(_Specimen);

var _renderMarkdown = require('../utils/renderMarkdown');

var _renderMarkdown2 = _interopRequireDefault(_renderMarkdown);

var _typography = require('../styles/typography');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Image = function (_React$Component) {
  _inherits(Image, _React$Component);

  function Image() {
    _classCallCheck(this, Image);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Image.prototype.render = function render() {
    var _props = this.props,
        theme = _props.catalog.theme,
        src = _props.src,
        title = _props.title,
        overlay = _props.overlay,
        description = _props.description,
        options = _objectWithoutProperties(_props, ['catalog', 'src', 'title', 'overlay', 'description']);

    var styles = {
      container: {
        position: 'relative',
        width: '100%'
      },
      imageContainer: {
        boxSizing: 'border-box',
        padding: '20px',
        background: 'url(' + theme.checkerboardPatternLight + ')',
        color: theme.textColor
      },
      image: {
        display: 'block',
        maxWidth: '100%'
      },
      overlay: {
        boxSizing: 'border-box',
        opacity: 0,
        width: '100%',
        position: 'absolute',
        padding: 20,
        top: 0,
        left: 0,
        ':hover': {
          opacity: 1
        }
      },
      meta: {
        margin: '20px 0 0 0'
      },
      title: _extends({}, (0, _typography.heading)(theme, 0), {
        color: theme.textColor,
        fontWeight: 700,
        margin: '0 0 8px 0'
      }),
      description: _extends({}, (0, _typography.text)(theme, -1)),
      light: {
        background: 'url(' + theme.checkerboardPatternLight + ')'
      },
      dark: {
        background: 'url(' + theme.checkerboardPatternDark + ')'
      },
      plain: {
        background: 'transparent',
        padding: 0
      },
      plain_light: {
        background: theme.bgLight,
        padding: '20px'
      },
      plain_dark: {
        background: theme.bgDark,
        padding: '20px'
      }
    };

    var backgroundStyle = _extends({}, options.plain ? styles.plain : null, options.light ? styles.light : null, options.dark ? styles.dark : null, options.plain && options.light ? styles.plain_light : null, options.plain && options.dark ? styles.plain_dark : null);

    // Deconstruct srcset strings
    var fallbackSrc = src.split(' ')[0];
    var fallbackOverlay = overlay ? overlay.split(' ')[0] : undefined;

    return _react2.default.createElement(
      'div',
      { style: styles.container },
      _react2.default.createElement(
        'div',
        { style: _extends({}, styles.imageContainer, backgroundStyle) },
        _react2.default.createElement(_radium.Style, {
          scopeSelector: '.cg-ImageSpecimenDescription >',
          rules: {
            ':first-child': {
              marginTop: 0
            },
            ':last-child': {
              marginBottom: 0
            }
          } }),
        _react2.default.createElement('img', { style: styles.image, srcSet: src, src: fallbackSrc }),
        overlay && _react2.default.createElement(
          'div',
          { style: _extends({}, styles.overlay, options.plain && !options.light && !options.dark ? { padding: 0 } : null) },
          _react2.default.createElement('img', { style: styles.image, srcSet: overlay, src: fallbackOverlay })
        )
      ),
      (title || description) && _react2.default.createElement(
        'div',
        { style: styles.meta },
        title && _react2.default.createElement(
          'div',
          { style: styles.title },
          title
        ),
        description && _react2.default.createElement(
          'div',
          { className: 'cg-ImageSpecimenDescription', style: styles.description },
          (0, _renderMarkdown2.default)({ text: description })
        )
      )
    );
  };

  return Image;
}(_react2.default.Component);

Image.propTypes = {
  catalog: _CatalogPropTypes.catalogShape.isRequired,
  src: _react.PropTypes.string.isRequired,
  title: _react.PropTypes.string,
  overlay: _react.PropTypes.string,
  description: _react.PropTypes.string,
  plain: _react.PropTypes.bool,
  light: _react.PropTypes.bool,
  dark: _react.PropTypes.bool
};

exports.default = (0, _Specimen2.default)()((0, _radium2.default)(Image));