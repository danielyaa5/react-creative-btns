'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _reactRouterScroll = require('react-router-scroll');

var _seqKey = require('../utils/seqKey');

var _seqKey2 = _interopRequireDefault(_seqKey);

var _configureRoutes = require('../configureRoutes');

var _configureRoutes2 = _interopRequireDefault(_configureRoutes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Catalog = function (_Component) {
  _inherits(Catalog, _Component);

  function Catalog() {
    _classCallCheck(this, Catalog);

    var _this = _possibleConstructorReturn(this, _Component.call(this));

    _this.getKey = (0, _seqKey2.default)('CatalogRouter');
    _this.state = {
      routerKey: _this.getKey()
    };
    return _this;
  }

  Catalog.prototype.componentWillReceiveProps = function componentWillReceiveProps() {
    this.setState({
      routerKey: this.getKey()
    });
  };

  Catalog.prototype.render = function render() {
    var configuration = this.props;
    var routerKey = this.state.routerKey;

    return _react2.default.createElement(_reactRouter.Router, {
      key: routerKey,
      history: configuration.useBrowserHistory ? _reactRouter.browserHistory : _reactRouter.hashHistory,
      routes: (0, _configureRoutes2.default)(configuration),
      render: (0, _reactRouter.applyRouterMiddleware)((0, _reactRouterScroll.useScroll)())
    });
  };

  return Catalog;
}(_react.Component);

exports.default = Catalog;


Catalog.propTypes = {
  useBrowserHistory: _react.PropTypes.bool
};